** Servlet Life Cycle Methods

There are three life cycle methods of a Servlet :

init()
service()
destroy()


Let’s look at each of these methods in details:

init() method: The Servlet.init() method is called by the Servlet container to indicate that this Servlet instance is instantiated successfully and is about to put into service.
//init() method

public class MyServlet implements Servlet{
   public void init(ServletConfig config) throws ServletException {
        //initialization code
   }
    //rest of code
}
service() method: The service() method of the Servlet is invoked to inform the Servlet about the client requests.
This method uses ServletRequest object to collect the data requested by the client.
This method uses ServletResponse object to generate the output content.
// service() method

public class MyServlet implements Servlet{
    public void service(ServletRequest res, ServletResponse res)
    throws ServletException, IOException {
            // request handling code
    }
    // rest of code
}
destroy() method: The destroy() method runs only once during the lifetime of a Servlet and signals the end of the Servlet instance.
//destroy() method

public void destroy()
As soon as the destroy() method is activated, the Servlet container releases the Servlet instance.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Life cycle methods:
Life cycle methods are those methods which are used to control the life cycle of the servlet. These methods are called in specific order during the servlets’s entire life cycle.
The class Servlet provides the methods to control and supervise the life cycle of servlet. There are three life cycle methods in the Servlet interface. There are as follows:

init() method :
A servlet’s life begins here .
This method is called only once to load the servlet.Since it is called only once in it’s lifetime,therefore “connected architecture” code is written inside it because we only 
want once to get connected with the database.
service() method :
The service() method is the most important method to perform that provides the connection between client and server.
The web server calls the service() method to handle requests coming from the client( web browsers) and to send response back to the client.
This method determines the type of Http request (GET, POST, PUT, DELETE, etc.) .
This method also calls various other methods such as doGet(), doPost(), doPut(), doDelete(), etc. as required.
This method accepts two parameters.
The prototype for this method:
public void service(ServletRequest req, ServletResponse resp) 
throws ServletException, IOException { }
where

req is the ServletRequest object which encapsulates the connection from client to server
resp is the ServletResponse object which encapsulates the connection from server back to the client
destroy() method :
The destroy() method is called only once.
It is called at the end of the life cycle of the servlet.
This method performs various tasks such as closing connection with the database, releasing memory allocated to the servlet, releasing resources that are allocated to the servlet 
and other cleanup activities.
When this method is called, the garbage collector comes into action.
The prototype for this method is:
public void destroy() { // Finalization code...}
Below is a sample program to illustrate Servlet in Java:


// Java program to show servlet example
// Importing required Java libraries
import java.io.*;
import javax.servlet.*;
import javax.servlet.http.*;
  
// Extend HttpServlet class
public class AdvanceJavaConcepts extends HttpServlet 
{ 
   private String output;
    
   // Initializing servlet 
   public void init() throws ServletException 
   {
      output = "Advance Java Concepts";
   }
  
   // Requesting and printing the output
   public void doGet(HttpServletRequest req, 
                    HttpServletResponse resp)
      throws ServletException, IOException 
      {
         resp.setContentType("text/html");
         PrintWriter out = resp.getWriter();
         out.println(output);
      }
  
      public void destroy() 
      {
         System.out.println("Over");
      }
}