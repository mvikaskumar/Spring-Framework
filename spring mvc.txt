Spring MVC Framework follows the Model-View-Controller design pattern. 
It is used to develop web applications. It works around DispatcherServlet.
DispatcherServlet handles all the HTTP requests and responses.
It dispatches the requests to handlers. It uses @Controller and @RequestMapping as default request handlers. 
The @Controller annotation defines that a particular class is a controller.
@RequestMapping annotation maps web requests to Spring Controller methods. The terms model, view, and controller are as follows:

Model: The Model encapsulates the application data.
View: View renders the model data and also generates HTML output that the clientâ€™s browser can interpret.
Controller: The Controller processes the user requests and passes them to the view for rendering.
Spring MVC Framework works as follows:

All the incoming requests are intercepted by the DispatcherServlet that works as the front controller.
The DispatcherServlet then gets an entry of handler mapping from the XML file and forwards the request to the controller.
The object of ModelAndView is returned by the controller.
The DispatcherServlet checks the entry of the view resolver in the XML file and invokes the appropriate view component.
*


Working of Spring MVC project:--

Step 1-> Firstly create a Dispatcher Servlet that will receive all the request comming from client side.
(configure dispatcher servlet In Web.xml File kept in WEB-INF folder)

<!DOCTYPE web-app PUBLIC
 "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
 "http://java.sun.com/dtd/web-app_2_3.dtd" >

<web-app>
	<display-name>Archetype Created Web Application</display-name>

	<!-- Configuring front end controller of dispatcher servlet -->

	<servlet>
		<servlet-name>spring</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
	</servlet>

	<servlet-mapping>
		<servlet-name>spring</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>
</web-app>

<!-- servlet configuration should be written in the body of <web-app> other wise it will generate error. -->



Step 2->Create internal resorce view resolver this will help to view pages.
(Create a {...-servlet.xml} file in WEb_INF folder).  #Remember always ..-servlet.xml name should be servlet-name of Dispatcher servlet.

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
http://www.springframework.org/schema/context
http://www.springframework.org/schema/context/spring-context-3.0.xsd
http://www.springframework.org/schema/mvc
http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd">

        <context:component-scan base-package="springMvc.Controller"></context:component-scan>   //here package should be controller package that ll help controller to understand
                                                                                                       that ll be view resolver page.
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver"
		name="viewResolver">

		<property name="prefix" value="/WEB-INF/views/"></property>
		<property name="suffix" value=".jsp"></property>
	</bean>


</beans>


Step ->3 Create a controller in src/main folder.


package springMvc.Controller;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;

@Controller                          //this annotation is use to make this class a controller.
public class HomeController {
	@RequestMapping("/index")      //
	public String index() {
		System.out.println("this is index page.");
		return "index";
	}

}


Step ->4 Create a page for view(in WEB-INF folder).

<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
    pageEncoding="ISO-8859-1"%>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<title>This is index page.</title>
</head>
<body>

<h1>This page is called from controller page.</h1>

</body>
</html>







*** Sending data from contoller to view--

*1st way is using Model Attribute

#Sending data
@RequestMapping("/about")
	public String about(Model model) {
		System.out.println("this is about page.");
		
		model.addAttribute("name","Vikas Vaibhav");     //Way of sending data from controller to view using model.
		
		return "about";
	}



#Getting data

<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
    pageEncoding="ISO-8859-1"%>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<title>This is about page</title>
</head>
<body>
<h1>This page is about page.</h1>
<h2>Name is vikas kumar.</h2>

<%
	String name = (String)request.getAttribute("name");             //this is how get data from controller.

%>
<h1> Name is  <%= name %></h1>

</body>
</html>



*2nd way is using ModelAndView Object

#Sending Data

@RequestMapping("/contact")
	public ModelAndView  Contact() {
		System.out.println("This is contact page.");
	
		ModelAndView modelandview = new ModelAndView();       //Way of sending data from controller to view using ModeAndView.
		modelandview.addObject("name","Vaibhav");
		return modelandview;
	}

#Getting Data

<%@page import="org.springframework.web.bind.annotation.RequestAttribute"%>
<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
    pageEncoding="ISO-8859-1"%>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<title>Insert title here</title>
</head>
<body>

<h1>This is contact page.</h1>
<%String Name = (String)request.getAttribute("name"); %>   	//Way of getting data from controller of ModelAndView object.
										//There is one more way of getting data using JSP Expression language.

<h2>Name is <%= Name%> </h2> 


</body>
</html>




** More about @RequstMapping()--

package springMvc.RequstMappingContoller;

import org.springframework.stereotype.Component;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;


@Component
@RequestMapping("/First")								//We can use @RequestMapping ar class level also.
public class RequestMappingController {
	@RequestMapping(path="/view", method=RequestMethod.GET)		//passing attributes in @RequestMapping.
	public String view(Model model) {
		System.out.println("This is RequestMapping controller page.");
		model.addAttribute("source","Wikipidia");
		return "view";
	}
	
	

}

# View of RequstMappingContoller--(Note-Don't forget to metion <context:component-scan base-package="springMvc.RequstMappingContoller"></context:component-scan> in ViewResolver Page.

<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
    pageEncoding="ISO-8859-1"%>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<title>Insert title here</title>
</head>
<body>
<h1>This  page is called from RequestMapping from Controller.</h1>
<% String name=(String)request.getAttribute("source"); %>

<h2>Source is <%=name %></h2>
</body>
</html>




